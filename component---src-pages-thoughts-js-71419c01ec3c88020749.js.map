{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js","webpack:///./src/pages/thoughts.js"],"names":["Bio","data","useStaticQuery","author","site","siteMetadata","avatar","social","childImageSharp","fixed","className","alt","name","imgStyle","borderRadius","elevation","style","padding","height","marginRight","summary","Layout","children","position","bottom","left","Date","getFullYear","SEO","description","lang","meta","title","metaDescription","defaultTitle","htmlAttributes","titleTemplate","content","property","twitter","concat","defaultProps","BlogIndex","location","siteTitle","posts","allMarkdownRemark","nodes","length","listStyle","map","post","frontmatter","fields","slug","console","log","key","itemScope","itemType","to","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","pageQuery"],"mappings":"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","file":"component---src-pages-thoughts-js-71419c01ec3c88020749.js","sourcesContent":["import React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Image from \"gatsby-image\"\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst Bio = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\r\n        childImageSharp {\r\n          fixed(quality: 95) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n            summary\r\n          }\r\n          social {\r\n            twitter\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n  const author = data.site.siteMetadata?.author\r\n  const social = data.site.siteMetadata?.social\r\n  const avatar = data?.avatar?.childImageSharp?.fixed\r\n\r\n  return (\r\n    <div className=\"bio\">\r\n      {avatar && (\r\n        <Image\r\n          fixed={avatar}\r\n          alt={author?.name || ``}\r\n          className=\"bio-avatar\"\r\n          imgStyle={{\r\n            borderRadius: `50%`,\r\n          }}\r\n        />\r\n      )}\r\n      {author?.name && (\r\n        <Paper elevation=\"5\" style={{padding:\"10px\", height:\"fit-content\", marginRight:\"18px\"}}>\r\n          <p> What's good? My name's {author.name} and {author?.summary || null} </p>\r\n        </Paper> \r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Bio\r\n","import React from \"react\"\r\nimport Header from './Header'\r\n\r\nconst Layout = ({ children }) => {\r\n\r\n  return (\r\n    <div>\r\n      <Header/>\r\n      <div className=\"global-wrapper\">\r\n        <main>{children}</main>\r\n        <footer style={{ position: \"absolute\",\r\n                          bottom:0,\r\n                          left:\"50%\"}}>\r\n          Made with ðŸ’– | {new Date().getFullYear()}\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = ({ description, lang, meta, title }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata?.social?.twitter || ``,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\nconst BlogIndex = ({ data, location }) => {\r\n  const siteTitle = data.site.siteMetadata?.title || `Title`\r\n  const posts = data.allMarkdownRemark.nodes\r\n\r\n  if (posts.length === 0) {\r\n    return (\r\n      <Layout location={location} title={siteTitle}>\r\n        <SEO title=\"All posts\" />\r\n        <Bio />\r\n        <p>\r\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\r\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\r\n          gatsby-config.js).\r\n        </p>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <SEO title=\"All posts\" />\r\n      <ol style={{ listStyle: `none` }}>\r\n        {posts.map(post => {\r\n          const title = post.frontmatter.title || post.fields.slug;\r\n          console.log(post.fields)\r\n          return (\r\n            <li key={post.fields.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemScope\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <header>\r\n                  <h2>\r\n                    <Link to={post.fields.slug} itemProp=\"url\">\r\n                      <span itemProp=\"headline\">{title}</span>\r\n                    </Link>\r\n                  </h2>\r\n                  <small>{post.frontmatter.date}</small>\r\n                </header>\r\n                <section>\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: post.frontmatter.description || post.excerpt,\r\n                    }}\r\n                    itemProp=\"description\"\r\n                  />\r\n                </section>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          title\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}